{"meta":{"title":"王秀龙的博客","subtitle":"王秀龙的博客","description":"王秀龙的博客","author":"王秀龙","url":"https://blog.kdsa.cn","root":"/"},"pages":[{"title":"","date":"2020-12-06T13:41:12.642Z","updated":"2020-12-06T13:41:12.636Z","comments":true,"path":"about/index.html","permalink":"https://blog.kdsa.cn/about/index.html","excerpt":"","text":"个人介绍00后全栈开发者，熟悉云开发 CloudBase、uni-app、thinkphp，有一些开发经验，喜欢研究Serverless技术和分享学习经验。 对服务端、前端、Serverless等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物。 学习经历2016年至2018年：学习win7操作系统、office办公软件、计算机工作原理、Visual FoxPro 2018年至2020年：学习thinkphp、mysql、vue.js、微信小程序、uni-app、Serverless Framework、云开发CloudBase 项目经历 2018年10月至2019年3月：学习和使用thinkphp、mysql和layui前端框架开发了一个个人博客。 2019年3月至2019年6月：和同学一起开发了考勤微信小程序，我负责用thinkphp开发管理端。 2019年8月至2019年10月：和学长一起开发了房哨app，我负责用uni-app开发前端页面，和学长后端接口对接。 2019年11月至2020年1月：和同学一起开发培训管理erp，时间原因最后交付给学长开发 2020年3月至2020年5月：使用云开发开发了云日程、云笔记，两个微信小程序 2020年5月至2020年6月：使用WordPress部署 因学官网，并开始写文章分享个人学习经验关于座右铭 The Harder You Work, The Luckier You Will Be. (越努力，越幸运) 关于爱好热爱运动，尤其喜爱跑步、阅读、电影。 社交平台 github：https://github.com/hzjsj 码云：https://gitee.com/hzjsj 知乎：https://www.zhihu.com/people/hzpc csdn：https://blog.csdn.net/weixin_43823236 联系我Email：me@kdsa.cn"}],"posts":[{"title":"Git 常用命令","slug":"git","date":"2020-12-07T05:00:36.617Z","updated":"2020-12-07T05:00:36.611Z","comments":true,"path":"2020/12/07/git/","link":"","permalink":"https://blog.kdsa.cn/2020/12/07/git/","excerpt":"","text":"仓库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name \"[name]\"$ git config [--global] user.email \"[email address]\" 增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat \"@&#123;0 day ago&#125;\"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 其他12# 生成一个可供发布的压缩包$ git archive","categories":[],"tags":[{"name":"git 命令","slug":"git-命令","permalink":"https://blog.kdsa.cn/tags/git-%E5%91%BD%E4%BB%A4/"}]},{"title":"Hello Midway FaaS","slug":"hello-world","date":"2020-12-06T12:53:44.715Z","updated":"2020-12-06T12:53:44.708Z","comments":true,"path":"2020/12/06/hello-world/","link":"","permalink":"https://blog.kdsa.cn/2020/12/06/hello-world/","excerpt":"","text":"Midway FaaS 是用于构建 Node.js 云函数的 Serverless 框架。帮助您在云原生时代大幅降低维护成本，更专注于产品研发。 跨云厂商：一份代码可在多个云平台间快速部署，不用担心你的产品会被云厂商所绑定。 代码复用：通过框架的依赖注入能力，让每一部分逻辑单元都天然可复用，可以快速方便地组合以生成复杂的应用。 传统迁移：通过框架的运行时扩展能力，让 Egg.js 、Koa、Express.js 等传统应用无缝迁移至各云厂商的云函数。 Midway FaaS 是阿里巴巴集团发起的开源项目，由一个专业的 Node.js 架构团队进行维护。已大规模应用于阿里集团各 BU 线上业务，稳定承载了数千万的流量。 ❤️ 欢迎关注 ➡️ ❤️ 详细文档 ➡️","categories":[],"tags":[]},{"title":"如何用域名来当作邮箱","slug":"email","date":"2020-12-06T12:15:29.851Z","updated":"2020-12-06T12:15:29.844Z","comments":true,"path":"2020/12/06/email/","link":"","permalink":"https://blog.kdsa.cn/2020/12/06/email/","excerpt":"","text":"之前搭建博客时购买了一个域名，在备案了，准备长期使用，突然想把域名当成邮箱。在网上查了一下，之前可以用QQ邮箱来解析，现在应该不可以了。然后就使用了 腾讯企业邮 做了一个域名邮箱。 下面介绍如何使用腾讯企业邮来做一个域名邮箱 1.我们需要有一个域名，需要实名认证2.注册一个 腾讯企业邮在注册过程中，如果没有企业的话，可以随便填一下，应该不会影响腾讯企业邮的使用注册成功后，登入管理员账号，系统会给我们随机分配一个免费的域名邮箱，这个时候，我们可以绑定自己的域名，如果是在腾讯云上买的域名，可以扫描授权一下就可以了，其它服务商可以看一下使用手册中 邮箱域名如何解析解析完成后可以，点击我的企业、域名管理 查看 上面操作完成后，我们可以在通讯录选项下、设置邮箱或者编辑用户时修改邮箱 最后我们登入 腾讯企业邮箱 ，可以看到下面这个页面","categories":[],"tags":[{"name":"域名","slug":"域名","permalink":"https://blog.kdsa.cn/tags/%E5%9F%9F%E5%90%8D/"},{"name":"邮箱","slug":"邮箱","permalink":"https://blog.kdsa.cn/tags/%E9%82%AE%E7%AE%B1/"}]},{"title":"使用 Docker 部署WordPress博客","slug":"docker","date":"2020-12-06T11:24:03.689Z","updated":"2020-12-06T11:24:03.682Z","comments":true,"path":"2020/12/06/docker/","link":"","permalink":"https://blog.kdsa.cn/2020/12/06/docker/","excerpt":"","text":"Docker 介绍Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 Docker 安装Docker 官网：https://www.docker.com/get-started 现在 Docker 有专门的 Win10 专业版系统的安装包，需要开启 Hyper-V。 阿里云镜像加速阿里云镜像获取地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到你的专属地址了： 在设置—Docker Engine 选项中填写加速地址 Docker 安装 MySQL查看可用的 MySQL 版本 1docker search mysql 拉取最新的 MySQL 镜像 1docker pull mysql:latest 查看本地镜像 1docker images 运行容器 1docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql 参数说明： -p 3306:3306 ： 映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机 ip:3306 访问到 MySQL 的服务 MYSQL_ROOT_PASSWORD=123456： 设置 MySQL 服务 root 用户的密码 Docker 安装 WordPress输入一下命令，表示使用mysql来启动WordPress 1docker run --name wordpress --link mysql:mysql -p 80:80 -d wordpress 此时，WordPress项目就跑起来了在本机输入localhost ，效果如下 关机后再次启动需要先把 mysql 启动起来，然后再启动WordPress 查看 CONTAINER ID 1docker ps 启动 1docker start 82220b303931 或者直接在 Containers / Apps 选项中点击启动","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://blog.kdsa.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.kdsa.cn/tags/Docker/"}]},{"title":"MiHo-主题安装和配置详情","slug":"miho","date":"2017-07-31T16:00:00.000Z","updated":"2020-12-06T12:06:04.491Z","comments":true,"path":"2017/08/01/miho/","link":"","permalink":"https://blog.kdsa.cn/2017/08/01/miho/","excerpt":"","text":"一. 主题简介&emsp;&emsp;MiHo 是一款单栏响应式的Hexo主题；基于 Hexo 3.0+ 制作，兼容移动端浏览；主题的代码托管在GitHub上，欢迎Star和Fork；如遇到问题或发表建议，可以提Issues，也可以在博客中留言给我，另外,喜欢的话不妨给个 Star。 二. 安装2.1 安装主题1$ git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho MiHo 主题需要Hexo 3.0或以上版本，请先升级。 2.2 更新12cd themes/mihogit pull 2.3 依赖安装如下依赖如果已经安装，请看配置介绍。 Json-content生成站点文章静态数据，用于站内搜索。 1npm install hexo-generator-json-content --save 三. 站点配置站点配置文件_config.yml在hexo根目录下。 3.1 启用主题1`theme: miho` 3.2 网站基本配置以下配置是站点的全局配置，更多配置，请查看 123456title: MinHow's Blogsubtitle: 网站副标题description: 专注 WEB 开发的技术博客author: MinHowlanguage: 网站使用的语言timezone: 网站时区 3.3 jsonContent配置详细的配置请查看hexo-generator-json-content 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: false 四. 主题配置编辑主题配置文件，themes/miho/_config.yml。 4.1 属性下面将介绍几个比较重要的配置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# hexo-theme-miho# https://github.com/wongminho/hexo-theme-miho# Favicon of your site | 网站iconfavicon: /favicon.ico# Header# Keywords of your site | 网站关键字keywords: MinHow,MinHow's Blog# Head headline | 头部标题header_title: MinHow's Blog# Head description | 头部描述header_description: 一个专注 WEB 开发的技术博客# Link to your logo | logo地址logo: images/logo.png# Link to your banner_img | 首页banner图地址banner_img: images/banner.jpg# Menu setting | 菜单设置# name: Font Awesome icon | Font Awesome 图标# title: Home Title | 标题# url: //minhow.com Url, absolute or relative path | 链接，绝对或相对路径# target: true Whether to jump out | 是否跳出menu: home: title: Home url: / target: false archive: title: Archives url: /archives target: false user: title: About url: /about target: false# Social setting, use to display social information | 社交设置，用来展示社交信息# name: Font Awesome icon | Font Awesome 图标# title: Home Icon title | 图标标题# url: //minhow.com Url, absolute or relative path | 链接，绝对或相对路径# target: true Whether to jump out | 是否跳出social: home: title: MinHow url: //minhow.com target: true github: title: Github url: //github.com/wongminho target: true weibo: title: Weibo url: //weibo.com/WongMinHo target: true twitter: title: Twitter url: //twitter.com/huangminhow target: true #qq: #weixin: #snapchat: #telegram: #mail: #facebook: #google: #linkedin:# Content# Excerpt length | 摘录长度excerpt_length: 190# Excerpt link | 摘录链接excerpt_link: more&gt;&gt;# New window open link | 新窗口打开文章open_new_link: false# Article default cover picture，size：350*150 | 文章默认封面图，尺寸：350*150cover_picture: images/banner.jpg# Open background particles | 开启背景粒子open_bg_particle: true# Open animation in homepage and head | 开启主页及头部动画open_animation: true# Article# Open toc | 是否开启toctoc: true# Open share | 是否开启分享share: true# Style customization | 样式定制style: # Main color tone | 主色调 main_color: '#0cc'# Comments | 评论# 畅言，输入appid和appkeychangyan_appid: falsechangyan_appkey: false# 友言，输入idyouyan_id: false# disqusdisqus: false# Analytics | 分析# 站长分析，输入站点idcnzz_analytics: false# 百度分析，输入key值baidu_analytics: false# google analytics | google分析google_analytics: false# Footer# Access statistics | “不蒜子”访问量统计access_counter: on: true site_uv: 总访客数： site_pv: 总访问量：# Copyright Information | 版权信息copyright: 2017 MinHow 4.2 文章封面图文章默认封面图，尺寸：350*150，当文章基本配置没有cover_picture时才显示。 1cover_picture: images/banner.jpg 4.3 开启背景粒子是否开启背景粒子。 1open_bg_particle: true 4.4 开启主页及头部动画是否开启主页及头部动画。 1open_animation: true 4.5 评论支持畅言、disqus。 1234567# 畅言，输入appid和appkeychangyan_appid: falsechangyan_appkey: false# 友言，输入idyouyan_id: false# disqusdisqus: false 4.6 数据统计支持站长、百度、google三种数据统计，正确填写配置信息即可。 123456# 站长分析，输入站点idcnzz_analytics: false# 百度分析，输入key值baidu_analytics: false# google分析google_analytics: false 4.7 文章基本配置123456789101112---title: Hello Worlddate: 2017-06-18categories: Firstauthor: MinHowtags: - First - Secondcover_picture: /images/banner.jpg--- MinHow-This is a summary&lt;!-- more --&gt; 说明： 需要注意tags和摘要的写法，不然首页不能正确显示标签和摘要； cover_picture文章封面图，不填默认显示_config.yml配置的图片。","categories":[{"name":"开源项目","slug":"开源项目","permalink":"https://blog.kdsa.cn/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://blog.kdsa.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"开源项目","slug":"开源项目","permalink":"https://blog.kdsa.cn/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"}],"author":"MinHow"}],"categories":[{"name":"开源项目","slug":"开源项目","permalink":"https://blog.kdsa.cn/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"git 命令","slug":"git-命令","permalink":"https://blog.kdsa.cn/tags/git-%E5%91%BD%E4%BB%A4/"},{"name":"域名","slug":"域名","permalink":"https://blog.kdsa.cn/tags/%E5%9F%9F%E5%90%8D/"},{"name":"邮箱","slug":"邮箱","permalink":"https://blog.kdsa.cn/tags/%E9%82%AE%E7%AE%B1/"},{"name":"博客","slug":"博客","permalink":"https://blog.kdsa.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.kdsa.cn/tags/Docker/"},{"name":"开源项目","slug":"开源项目","permalink":"https://blog.kdsa.cn/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"}]}